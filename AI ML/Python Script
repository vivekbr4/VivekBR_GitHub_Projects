import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np
import os

# Function to handle file upload
def upload_file():
    file_path = filedialog.askopenfilename(
        title="Select a CSV File", filetypes=[("CSV files", "*.csv")]
    )
    if file_path:
        file_label.config(text=os.path.basename(file_path))
        load_and_process_data(file_path)

# Function to load and process data
def load_and_process_data(file_path):
    try:
        # Read CSV file
        data = pd.read_csv(file_path)

        # Check if the data contains a 'Date' and 'Value' column
        if 'Date' in data.columns and 'Value' in data.columns:
            # Convert 'Date' to datetime
            data['Date'] = pd.to_datetime(data['Date'])
            # Call function to plot and predict
            plot_and_predict(data)
        else:
            messagebox.showerror("Error", "CSV must contain 'Date' and 'Value' columns.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load data: {str(e)}")

# Function to plot and predict future data
def plot_and_predict(data):
    # Prepare data for training
    data['Date_ordinal'] = data['Date'].map(pd.Timestamp.toordinal)
    X = data[['Date_ordinal']]
    y = data['Value']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    # Fit a simple linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict future values on test data
    y_pred = model.predict(X_test)

    # Calculate prediction accuracy (RMSE)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    accuracy = 100 - (rmse / y.mean()) * 100  # Calculate accuracy as percentage
    accuracy_label.config(text=f"Model Accuracy: {accuracy:.2f}%", font=('Helvetica', 16, 'bold'), foreground='green')

    # Update Data Points Analyzed label
    data_points_label.config(text=f"Data Points Analyzed: {len(data)}", font=('Helvetica', 16, 'bold'), foreground='blue')

    # Plot actual and predicted data
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))  # Set plots side by side

    # Linear regression plot
    fontdict = {'fontsize': 12, 'fontweight': 'bold'}
    ax1.plot(data['Date'], data['Value'], label="Actual Data", color='blue')
    ax1.plot(data.loc[X_test.index, 'Date'], y_pred, label="Predicted Data", color='orange')
    ax1.set_xlabel("Date", fontdict={'fontsize': 12})
    ax1.set_ylabel("Value", fontdict={'fontsize': 12})
    ax1.set_title("Time Series Data with Prediction", fontdict={'fontsize': 12, 'fontweight': 'bold'})
    ax1.legend()
    ax1.grid(True)

    # Heatmap
    heatmap_data = data.copy()
    heatmap_data.set_index('Date', inplace=True)
    heatmap_data = heatmap_data.resample('ME').mean()  # Resample to monthly data for better heatmap
    sns.heatmap(heatmap_data.T, ax=ax2, cmap="YlGnBu", cbar=True)
    ax2.set_title('Monthly Value Heatmap', fontdict={'fontsize': 12, 'fontweight': 'bold'})
    ax2.set_xlabel('Date', fontdict={'fontsize': 12})
    ax2.set_ylabel('Value', fontdict={'fontsize': 12})

    plt.tight_layout()

    # Display the plot in the Tkinter UI
    canvas = FigureCanvasTkAgg(fig, master=plot_frame)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

# Create Tkinter window
root = tk.Tk()
root.title("AI/ML Trend Analytics - Future Trend Predictor")
root.geometry("1200x600")  # Adjust window size for side by side plots
root.configure(bg='#ffffff')  # Background color set to white

# Main container frame
main_frame = ttk.Frame(root)
main_frame.pack(pady=20)

# Left frame for logo
logo_frame = ttk.Frame(main_frame)
logo_frame.grid(row=0, column=0, padx=20)

# Middle frame for intro text and upload button
upload_frame = ttk.Frame(main_frame)
upload_frame.grid(row=0, column=1, padx=20)

# Right frame for accuracy and data points
info_frame = ttk.Frame(main_frame)
info_frame.grid(row=0, column=2, padx=20)

# Frame for the plot
plot_frame = ttk.Frame(root)
plot_frame.pack(pady=20)

# Load logo image
logo_path = r"C:/Users/theja/Desktop/Python Projects/Predictive Analytics/Predictive Analytics_Enhanced/Predictive Analytics_Enhanced/AI ML Image.png"
logo = Image.open(logo_path)  # Updated path
logo = logo.resize((200, 100), Image.Resampling.LANCZOS)  # Updated size
logo_image = ImageTk.PhotoImage(logo)

# Logo label
logo_label = ttk.Label(logo_frame, image=logo_image)
logo_label.image = logo_image  # Keep a reference to avoid garbage collection
logo_label.pack(pady=10)

# Label for the intro text
intro_label = ttk.Label(upload_frame, text="Created by Vivek B R\nStart by uploading your CSV data file with 2 columns named Date, Value", justify=tk.LEFT, anchor="w", padding=10)
intro_label.pack(pady=10)

# Label for the selected file
file_label = ttk.Label(upload_frame, text="No file selected", width=50, anchor="w", padding=10)
file_label.pack(pady=10)

# Button to upload a CSV file
upload_button = ttk.Button(upload_frame, text="Upload CSV", command=upload_file)
upload_button.pack(pady=10)

# Label to display accuracy
accuracy_label = ttk.Label(info_frame, text="Model Accuracy: N/A", padding=10)
accuracy_label.pack(pady=10)

# Label to display data points
data_points_label = ttk.Label(info_frame, text="Data Points Analyzed: N/A", padding=10)
data_points_label.pack(pady=10)

# Start Tkinter loop
root.mainloop()
